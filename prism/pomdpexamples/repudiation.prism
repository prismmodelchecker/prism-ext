// simple version of the repudiation protocol of Markowitch and Roggeman

pomdp

// included ack in the observables as recipient will know this as they send the acks
observables
	unfair, r, mess, ack
endobservables

const int K; // maximum number of messages 
// number of messages uniformly chosen over 1,...,K

module originator

	o : [0..3]; // local state of originator
	// 0 initial state
	// 1 send messages
	// 2 receive acks
	// 3 done 

	N : [0..K]; // number of messages 
	ack : [0..K]; // number of acks the originator has received
	
	unfair : [0..1];
	
	//  get request (so set K)
	[req] o=0 & K=1 ->  1/K : (o'=1) & (N'=1);
	[req] o=0 & K=2 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2);
	[req] o=0 & K=3 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3);
	
	[req] o=0 & K=4 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4);
	[req] o=0 & K=5 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5);
	[req] o=0 & K=6 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6);
	[req] o=0 & K=7 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7);
	[req] o=0 & K=8 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8);
	[req] o=0 & K=9 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9);
	[req] o=0 & K=10 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9)
				+ 1/K : (o'=1) & (N'=10);
	[req] o=0  & K=11 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9)
				+ 1/K : (o'=1) & (N'=10)
				+ 1/K : (o'=1) & (N'=11);
	[req] o=0  & K=12 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9)
				+ 1/K : (o'=1) & (N'=10)
				+ 1/K : (o'=1) & (N'=11)
				+ 1/K : (o'=1) & (N'=12);
	[req] o=0  & K=13 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9)
				+ 1/K : (o'=1) & (N'=10)
				+ 1/K : (o'=1) & (N'=11)
				+ 1/K : (o'=1) & (N'=12)
				+ 1/K : (o'=1) & (N'=13);
	[req] o=0  & K=14 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9)
				+ 1/K : (o'=1) & (N'=10)
				+ 1/K : (o'=1) & (N'=11)
				+ 1/K : (o'=1) & (N'=12)
				+ 1/K : (o'=1) & (N'=13)
				+ 1/K : (o'=1) & (N'=14);
	[req] o=0  & K=15 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9)
				+ 1/K : (o'=1) & (N'=10)
				+ 1/K : (o'=1) & (N'=11)
				+ 1/K : (o'=1) & (N'=12)
				+ 1/K : (o'=1) & (N'=13)
				+ 1/K : (o'=1) & (N'=14)
				+ 1/K : (o'=1) & (N'=15);
	[req] o=0  & K=16 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9)
				+ 1/K : (o'=1) & (N'=10)
				+ 1/K : (o'=1) & (N'=11)
				+ 1/K : (o'=1) & (N'=12)
				+ 1/K : (o'=1) & (N'=13)
				+ 1/K : (o'=1) & (N'=14)
				+ 1/K : (o'=1) & (N'=15)
				+ 1/K : (o'=1) & (N'=16);
	[req] o=0  & K=17 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9)
				+ 1/K : (o'=1) & (N'=10)
				+ 1/K : (o'=1) & (N'=11)
				+ 1/K : (o'=1) & (N'=12)
				+ 1/K : (o'=1) & (N'=13)
				+ 1/K : (o'=1) & (N'=14)
				+ 1/K : (o'=1) & (N'=15)
				+ 1/K : (o'=1) & (N'=16)
				+ 1/K : (o'=1) & (N'=17);
	[req] o=0  & K=18 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9)
				+ 1/K : (o'=1) & (N'=10)
				+ 1/K : (o'=1) & (N'=11)
				+ 1/K : (o'=1) & (N'=12)
				+ 1/K : (o'=1) & (N'=13)
				+ 1/K : (o'=1) & (N'=14)
				+ 1/K : (o'=1) & (N'=15)
				+ 1/K : (o'=1) & (N'=16)
				+ 1/K : (o'=1) & (N'=17)
				+ 1/K : (o'=1) & (N'=18);
	[req] o=0  & K=19 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9)
				+ 1/K : (o'=1) & (N'=10)
				+ 1/K : (o'=1) & (N'=11)
				+ 1/K : (o'=1) & (N'=12)
				+ 1/K : (o'=1) & (N'=13)
				+ 1/K : (o'=1) & (N'=14)
				+ 1/K : (o'=1) & (N'=15)
				+ 1/K : (o'=1) & (N'=16)
				+ 1/K : (o'=1) & (N'=17)
				+ 1/K : (o'=1) & (N'=18)
				+ 1/K : (o'=1) & (N'=19);
	[req] o=0  & K=20 ->  1/K : (o'=1) & (N'=1)
				+ 1/K : (o'=1) & (N'=2)
				+ 1/K : (o'=1) & (N'=3)
				+ 1/K : (o'=1) & (N'=4)
				+ 1/K : (o'=1) & (N'=5)
				+ 1/K : (o'=1) & (N'=6)
				+ 1/K : (o'=1) & (N'=7)
				+ 1/K : (o'=1) & (N'=8)
				+ 1/K : (o'=1) & (N'=9)
				+ 1/K : (o'=1) & (N'=10)
				+ 1/K : (o'=1) & (N'=11)
				+ 1/K : (o'=1) & (N'=12)
				+ 1/K : (o'=1) & (N'=13)
				+ 1/K : (o'=1) & (N'=14)
				+ 1/K : (o'=1) & (N'=15)
				+ 1/K : (o'=1) & (N'=16)
				+ 1/K : (o'=1) & (N'=17)
				+ 1/K : (o'=1) & (N'=18)
				+ 1/K : (o'=1) & (N'=19)
				+ 1/K : (o'=1) & (N'=20);
	
	[mess] o=1 -> (o'=2); // send message
	[ack] o=2 & ack<N-1 -> (o'=1) & (ack'=min(ack+1,K)); // receive ack & not last ack
	[ack] o=2 & ack=N-1 -> (o'=3) & (ack'=min(ack+1,K)); // receive last ack
	[done] o=3 -> true; // tell recipient all messages have been sent (recipient does not know N)
	
	// recipient stops early - check if unfair to originator
	[stop] ack<N & mess=N -> (unfair'=1) & (o'=3); 
	[stop] !(ack<N & mess=N) -> (o'=3); 

endmodule

module recipient

	r : [0..3]; // local state of recipient
	// 0 initial state
	// 1 receive messages
	// 2 send acks
	// 3 done
	
	mess : [0..K]; // number of mess the originator has received
	
	[req] r=0 -> (r'=1); // send request (initiate protocol)
	[mess] r=1 -> (r'=2) & (mess'=min(mess+1,K)); // receive message
	[ack] r=2 -> (r'=1); // send ack & not last
	[done] true -> (r'=3); // originator lets recipient know protocol over
	[stop] r<=2 -> (r'=3); // stop early
	
endmodule

rewards
	[stop] ack<N & mess=N : 1;
endrewards
